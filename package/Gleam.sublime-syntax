%YAML 1.2
---
version: 2

file_extensions:
  - gleam

scope: source.gleam

variables:
  discard: '_[_0-9a-z]*'
  name: '[a-z][_0-9a-z]*'
  upname: '[A-Z][0-9a-zA-Z]*'
  not_module_keyword: '(?!const|external|fn|import|opaque|pub)'

contexts:
  # Prepended to all scopes by default.
  prototype:
    - include: whitespace
    - include: comment

  # Consumes any sequence of whitespace characters, including newlines.
  whitespace:
    - match: \s
      push:
        - match: (?=\S)
          pop: true

  opt:
    - match: ''
      pop: true

  req:
    - match: ''
      pop: true
    # - match: .
    #   scope: invalid.illegal.gleam
    #   push:
    #     - match: .*
    #       meta_include_prototype: false

  # The initial scope.
  main:
    - match: import\b
      scope: keyword.control.import.gleam
      branch_point: import
      branch:
        - import--name
        - import--aliased-name

  # ==== Comments
  #
  # According to the naming guide, "multi-line comments used as documentation"
  # should use `comment.block.documentation`. Unknown whether this has any real
  # effect in editors, or whether the scope should be applied to the entire doc
  # comment "unbroken" by line breaks (which we don't do here).
  #
  # Ref: https://www.sublimetext.com/docs/scope_naming.html#comment

  comment:
    - match: ///?/?
      scope: punctuation.definition.comment.line.gleam
      push:
        - meta_scope: comment.line.gleam
        - match: $
          pop: true

  # ==== Import statements

  import--name:
    - match: '{{not_module_keyword}}((?:{{name}}/)*)({{name}})'
      captures:
        1: entity.other.module-path.gleam
        2: entity.name.namespace.gleam
      set:
        - import--no-alias
        - import--unqualified
    - include: req

  import--aliased-name:
    - match: '{{not_module_keyword}}((?:{{name}}/)*)({{name}})'
      captures:
        1: entity.other.module-path.gleam
        2: entity.other.aliased.namespace.gleam
      set:
        - import--alias
        - import--unqualified
    - include: req

  import--unqualified:
    - match: (\.)({)
      captures:
        1: punctuation.accessor.gleam
        2: punctuation.definition.generic.begin.gleam
      set: import--unqualified--pre
    - include: opt

  import--no-alias:
    - match: as
      fail: import
    - match: ''
      pop: true

  import--alias:
    - match: as
      scope: keyword.other.alias.gleam
      set:
        - match: '{{not_module_keyword}}{{name}}'
          scope: entity.name.namespace.gleam
          pop: true
        - match: '{{discard}}'
          scope: comment.other.discard.gleam
          pop: true
        - include: req
    - include: req

  import--unqualified--pre:
    - include: block-end
    - match: ''
      set: import--unqualified--item

  import--unqualified--item:
    - match: 'type'
      scope: storage.type.gleam
      set: import--unqualified--item--type
    - match: '(?=[A-Z])'
      set: import--unqualified--item--variant
    - match: '(?=[a-z])'
      set: import--unqualified--item--constant
    - include: import--unqualified--req

  import--unqualified--item--type:
    - match: '({{upname}})\s+(as)'
      captures:
        1: entity.other.aliased.type.gleam
        2: keyword.other.alias.gleam
      set: import--unqualified--item--type--alias
    - match: '{{upname}}'
      scope: entity.name.type.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--item--type--alias:
    - match: '{{upname}}'
      scope: entity.name.type.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--item--variant:
    - match: '({{upname}})\s+(as)'
      captures:
        1: entity.other.aliased.function.constructor.gleam
        2: keyword.other.alias.gleam
      set: import--unqualified--item--variant--alias
    - match: '{{upname}}'
      scope: entity.name.function.constructor.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--item--variant--alias:
    - match: '{{upname}}'
      scope: entity.name.function.constructor.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--item--constant:
    - match: '({{name}})\s+(as)'
      captures:
        1: entity.other.aliased.constant.gleam
        2: keyword.other.alias.gleam
      set: import--unqualified--item--constant--alias
    - match: '{{name}}'
      scope: entity.name.constant.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--item--constant--alias:
    - match: '{{name}}'
      scope: entity.name.constant.gleam
      set: import--unqualified--post
    - include: import--unqualified--req

  import--unqualified--post:
    - include: block-end
    - match: ','
      scope: punctuation.separator.gleam
      set: import--unqualified--pre
    - include: import--unqualified--req

  import--unqualified--req:
    - match: ''
      set:
      - match: (?=[,}])
        set: import--unqualified--post

  # === Common

  block-end:
    - match: '}'
      scope: punctuation.definition.generic.end.gleam
      pop: true

  # # Attributes (annotations)
  # attribute:
  #   - match: ^\s*(@{{lower_ident}})\(
  #     captures:
  #       1: variable.other.constant.gleam
  #     push:
  #       - include: arguments
  #       - meta_scope: meta.annotation.gleam
  #   - match: ^\s*(@{{lower_ident}})
  #     scope: meta.annotation.gleam
  #     captures:
  #       1: variable.other.constant.gleam

  # # Arguments (to a function call, record constructor, or attribute)
  # arguments:
  #   - include: bitstring
  #   - include: block
  #   - include: comment
  #   - include: function_def
  #   - include: function_call
  #   - include: record
  #   - include: number
  #   - include: operator
  #   - include: punctuation
  #   - include: string
  #   - include: unused_name
  #   - include: type_name
  #   - match: '\b{{lower_ident}}:'
  #     scope: constant.other.gleam
  #   - match: \)
  #     pop: true

  # # Bitstrings
  # bitstring:
  #   - match: '<<'
  #     scope: punctuation.definition.generic.begin.gleam
  #     push:
  #       - include: number
  #       - include: string
  #       - match: \b(bytes|int|float|bits|utf8|utf16|utf32|utf8_codepoint|utf16_codepoint|utf32_codepoint|signed|unsigned|big|little|native|unit|size)\b
  #         scope: keyword.other.gleam
  #       - match: '>>'
  #         scope: punctuation.definition.generic.end.gleam
  #         pop: true

  # # Blocks
  # block:
  #   - match: '{'
  #     scope: punctuation.section.block.begin.gleam
  #   - match: '}'
  #     scope: punctuation.section.block.end.gleam

  # # Constant definitions
  # constant_def:
  #   - match: \b(const)\s+({{lower_ident}})\b
  #     captures:
  #       1: keyword.other.gleam
  #       2: entity.name.constant.gleam

  # # Function calls
  # function_call:
  #   - match: \b(?:{{lower_ident}}\.)*({{lower_ident}})\(
  #     captures:
  #       1: variable.function.gleam
  #     push: arguments

  # # Function definitions
  # function_def:
  #   - match: \b(fn)(?:[[:space:]]+({{lower_ident}}))?[[:space:]]*\(
  #     captures:
  #       1: storage.type.function.gleam
  #       2: entity.name.function.gleam
  #     push: function_def_args
  #   - match: ->
  #     scope: keyword.declaration.function.gleam

  # # Function arguments
  # function_def_args:
  #   - include: function_def
  #   - include: punctuation
  #   - include: type_name
  #   - include: unused_name
  #   - match: \b(?:({{lower_ident}})[[:space:]]+)?({{lower_ident}}:)
  #     captures:
  #       1: constant.other.gleam
  #       2: variable.parameter.gleam
  #   - match: \(
  #     push: function_def_args
  #   - match: \)
  #     pop: true

  # # Keywords
  # keyword:
  #   - match: \b(as|assert|case|const|let|panic|todo|use)\b
  #     scope: keyword.other.gleam
  #   - match: \b(opaque|pub)\b
  #     scope: storage.modifier.gleam
  #   - match: \btype\b
  #     scope: storage.type.gleam
  #   - match: \bfn\b
  #     scope: storage.type.function.gleam
  #   # Reserved for future use
  #   - match: \b(auto|delegate|derive|echo|else|implement|macro|test)\b
  #     scope: invalid.illegal.gleam

  # Numbers
  # number:
  #   - match: \b0b[01]+\b
  #     scope: constant.numeric.binary.gleam
  #   - match: \b0b[0-7]+\b
  #     scope: constant.numeric.octal.gleam
  #   - match: \b[[:digit:]][[:digit:]_]*(\.[[:digit:]]*)?\b
  #     scope: constant.numeric.decimal.gleam
  #   - match: \b0x[[:xdigit:]]+\b
  #     scope: constant.numeric.hexadecimal.gleam

  # # Operators
  # operator:
  #   - match: (\|>|\.\.|<=\.|>=\.|==\.|!=\.|<\.|>\.|<=|>=|==|!=|<|>|<>|\|)
  #     scope: keyword.operator.gleam
  #   - match: (\+\.|\-\.|/\.|\*\.|%\.|\+|\-|/|\*|%)
  #     scope: keyword.operator.arithmetic.gleam
  #   - match: (=|<-)
  #     scope: keyword.operator.assignment.gleam
  #   - match: (&&|\|\|)
  #     scope: keyword.operator.logical.gleam

  # # Punctuation (separators, accessors)
  # punctuation:
  #   - match: \.
  #     scope: punctuation.accessor.gleam
  #   - match: ','
  #     scope: punctuation.separator.gleam

  # # Records (constructors with arguments)
  # record:
  #   - match: \b((?:{{lower_ident}}\.)*{{upper_ident}})\(
  #     captures:
  #       1: entity.name.type.gleam
  #     push: arguments

  # # Strings
  # string:
  #   - match: '"'
  #     scope: punctuation.definition.string.begin.gleam
  #     push:
  #       - meta_scope: string.quoted.double.gleam
  #       - match: \\[nrt"\\]
  #         scope: constant.character.escape.gleam
  #       - match: \\u\{[[:xdigit:]]{1,6}\}
  #         scope: constant.character.escape.gleam
  #       - match: \\
  #         scope: invalid.illegal.gleam
  #       - match: '"'
  #         scope: punctuation.definition.string.end.gleam
  #         pop: true

  # # Types and constructors
  # type_name:
  #   - match: \b(?:{{lower_ident}}\.)*{{upper_ident}}\b
  #     scope: entity.name.type.gleam

  # # Unused bindings
  # unused_name:
  #   - match: \b_{{lower_ident}}\b
  #     scope: comment.line.gleam
